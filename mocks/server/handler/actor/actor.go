// Code generated by MockGen. DO NOT EDIT.
// Source: server/handler/actor/actor.go
//
// Generated by this command:
//
//	mockgen -source=server/handler/actor/actor.go -destination=mocks/server/handler/actor/actor.go
//

// Package mock_actor is a generated GoMock package.
package mock_actor

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockActorHandler is a mock of ActorHandler interface.
type MockActorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActorHandlerMockRecorder
}

// MockActorHandlerMockRecorder is the mock recorder for MockActorHandler.
type MockActorHandlerMockRecorder struct {
	mock *MockActorHandler
}

// NewMockActorHandler creates a new mock instance.
func NewMockActorHandler(ctrl *gomock.Controller) *MockActorHandler {
	mock := &MockActorHandler{ctrl: ctrl}
	mock.recorder = &MockActorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorHandler) EXPECT() *MockActorHandlerMockRecorder {
	return m.recorder
}

// AddNewActor mocks base method.
func (m *MockActorHandler) AddNewActor(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewActor", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddNewActor indicates an expected call of AddNewActor.
func (mr *MockActorHandlerMockRecorder) AddNewActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewActor", reflect.TypeOf((*MockActorHandler)(nil).AddNewActor), w, r)
}

// ChangeInformationAboutActor mocks base method.
func (m *MockActorHandler) ChangeInformationAboutActor(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInformationAboutActor", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// ChangeInformationAboutActor indicates an expected call of ChangeInformationAboutActor.
func (mr *MockActorHandlerMockRecorder) ChangeInformationAboutActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInformationAboutActor", reflect.TypeOf((*MockActorHandler)(nil).ChangeInformationAboutActor), w, r)
}

// DeleteActorByID mocks base method.
func (m *MockActorHandler) DeleteActorByID(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorByID", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteActorByID indicates an expected call of DeleteActorByID.
func (mr *MockActorHandlerMockRecorder) DeleteActorByID(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorByID", reflect.TypeOf((*MockActorHandler)(nil).DeleteActorByID), w, r)
}

// GetActorByNameAndSurname mocks base method.
func (m *MockActorHandler) GetActorByNameAndSurname(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByNameAndSurname", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetActorByNameAndSurname indicates an expected call of GetActorByNameAndSurname.
func (mr *MockActorHandlerMockRecorder) GetActorByNameAndSurname(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByNameAndSurname", reflect.TypeOf((*MockActorHandler)(nil).GetActorByNameAndSurname), w, r)
}

// Handler mocks base method.
func (m *MockActorHandler) Handler(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockActorHandlerMockRecorder) Handler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockActorHandler)(nil).Handler), w, r)
}
