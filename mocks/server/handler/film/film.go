// Code generated by MockGen. DO NOT EDIT.
// Source: server/handler/film/film.go
//
// Generated by this command:
//
//	mockgen -source=server/handler/film/film.go -destination=mocks/server/handler/film/film.go
//

// Package mock_film is a generated GoMock package.
package mock_film

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilmHandler is a mock of FilmHandler interface.
type MockFilmHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFilmHandlerMockRecorder
}

// MockFilmHandlerMockRecorder is the mock recorder for MockFilmHandler.
type MockFilmHandlerMockRecorder struct {
	mock *MockFilmHandler
}

// NewMockFilmHandler creates a new mock instance.
func NewMockFilmHandler(ctrl *gomock.Controller) *MockFilmHandler {
	mock := &MockFilmHandler{ctrl: ctrl}
	mock.recorder = &MockFilmHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmHandler) EXPECT() *MockFilmHandlerMockRecorder {
	return m.recorder
}

// AddNewFilm mocks base method.
func (m *MockFilmHandler) AddNewFilm(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewFilm", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddNewFilm indicates an expected call of AddNewFilm.
func (mr *MockFilmHandlerMockRecorder) AddNewFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewFilm", reflect.TypeOf((*MockFilmHandler)(nil).AddNewFilm), w, r)
}

// ChangeInformationAboutFilm mocks base method.
func (m *MockFilmHandler) ChangeInformationAboutFilm(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInformationAboutFilm", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// ChangeInformationAboutFilm indicates an expected call of ChangeInformationAboutFilm.
func (mr *MockFilmHandlerMockRecorder) ChangeInformationAboutFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInformationAboutFilm", reflect.TypeOf((*MockFilmHandler)(nil).ChangeInformationAboutFilm), w, r)
}

// DeleteFilmByID mocks base method.
func (m *MockFilmHandler) DeleteFilmByID(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmByID", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteFilmByID indicates an expected call of DeleteFilmByID.
func (mr *MockFilmHandlerMockRecorder) DeleteFilmByID(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmByID", reflect.TypeOf((*MockFilmHandler)(nil).DeleteFilmByID), w, r)
}

// GetActors mocks base method.
func (m *MockFilmHandler) GetActors(w http.ResponseWriter, title string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", w, title)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetActors indicates an expected call of GetActors.
func (mr *MockFilmHandlerMockRecorder) GetActors(w, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockFilmHandler)(nil).GetActors), w, title)
}

// GetAllFilms mocks base method.
func (m *MockFilmHandler) GetAllFilms(w http.ResponseWriter, queryParams url.Values) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms", w, queryParams)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockFilmHandlerMockRecorder) GetAllFilms(w, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockFilmHandler)(nil).GetAllFilms), w, queryParams)
}

// GetFilmByTitleOrActorNameAndSurname mocks base method.
func (m *MockFilmHandler) GetFilmByTitleOrActorNameAndSurname(w http.ResponseWriter, title, actor string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmByTitleOrActorNameAndSurname", w, title, actor)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFilmByTitleOrActorNameAndSurname indicates an expected call of GetFilmByTitleOrActorNameAndSurname.
func (mr *MockFilmHandlerMockRecorder) GetFilmByTitleOrActorNameAndSurname(w, title, actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmByTitleOrActorNameAndSurname", reflect.TypeOf((*MockFilmHandler)(nil).GetFilmByTitleOrActorNameAndSurname), w, title, actor)
}

// GetMediator mocks base method.
func (m *MockFilmHandler) GetMediator(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediator", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMediator indicates an expected call of GetMediator.
func (mr *MockFilmHandlerMockRecorder) GetMediator(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediator", reflect.TypeOf((*MockFilmHandler)(nil).GetMediator), w, r)
}

// Handler mocks base method.
func (m *MockFilmHandler) Handler(w http.ResponseWriter, r *http.Request) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", w, r)
	ret0, _ := ret[0].(int)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockFilmHandlerMockRecorder) Handler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockFilmHandler)(nil).Handler), w, r)
}
