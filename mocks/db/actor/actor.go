// Code generated by MockGen. DO NOT EDIT.
// Source: db/actor/actor.go
//
// Generated by this command:
//
//	mockgen -source=db/actor/actor.go -destination=mocks/db/actor/actor.go
//

// Package mock_actor is a generated GoMock package.
package mock_actor

import (
	reflect "reflect"
	time "time"

	actor "github.com/lilpipidron/vk-godeveloper-task/api/types/actor"
	gender "github.com/lilpipidron/vk-godeveloper-task/api/types/gender"
	gomock "go.uber.org/mock/gomock"
)

// MockActorRepository is a mock of ActorRepository interface.
type MockActorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepositoryMockRecorder
}

// MockActorRepositoryMockRecorder is the mock recorder for MockActorRepository.
type MockActorRepositoryMockRecorder struct {
	mock *MockActorRepository
}

// NewMockActorRepository creates a new mock instance.
func NewMockActorRepository(ctrl *gomock.Controller) *MockActorRepository {
	mock := &MockActorRepository{ctrl: ctrl}
	mock.recorder = &MockActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepository) EXPECT() *MockActorRepositoryMockRecorder {
	return m.recorder
}

// AddNewActor mocks base method.
func (m *MockActorRepository) AddNewActor(name, surname string, gender gender.Gender, dateOfBirth time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewActor", name, surname, gender, dateOfBirth)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewActor indicates an expected call of AddNewActor.
func (mr *MockActorRepositoryMockRecorder) AddNewActor(name, surname, gender, dateOfBirth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewActor", reflect.TypeOf((*MockActorRepository)(nil).AddNewActor), name, surname, gender, dateOfBirth)
}

// ChangeActorDateOfBirth mocks base method.
func (m *MockActorRepository) ChangeActorDateOfBirth(actorID int64, dateOfBirth time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActorDateOfBirth", actorID, dateOfBirth)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeActorDateOfBirth indicates an expected call of ChangeActorDateOfBirth.
func (mr *MockActorRepositoryMockRecorder) ChangeActorDateOfBirth(actorID, dateOfBirth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActorDateOfBirth", reflect.TypeOf((*MockActorRepository)(nil).ChangeActorDateOfBirth), actorID, dateOfBirth)
}

// ChangeActorGender mocks base method.
func (m *MockActorRepository) ChangeActorGender(actorID int64, gender gender.Gender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActorGender", actorID, gender)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeActorGender indicates an expected call of ChangeActorGender.
func (mr *MockActorRepositoryMockRecorder) ChangeActorGender(actorID, gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActorGender", reflect.TypeOf((*MockActorRepository)(nil).ChangeActorGender), actorID, gender)
}

// ChangeActorName mocks base method.
func (m *MockActorRepository) ChangeActorName(actorID int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActorName", actorID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeActorName indicates an expected call of ChangeActorName.
func (mr *MockActorRepositoryMockRecorder) ChangeActorName(actorID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActorName", reflect.TypeOf((*MockActorRepository)(nil).ChangeActorName), actorID, name)
}

// ChangeActorSurname mocks base method.
func (m *MockActorRepository) ChangeActorSurname(actorID int64, surname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActorSurname", actorID, surname)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeActorSurname indicates an expected call of ChangeActorSurname.
func (mr *MockActorRepositoryMockRecorder) ChangeActorSurname(actorID, surname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActorSurname", reflect.TypeOf((*MockActorRepository)(nil).ChangeActorSurname), actorID, surname)
}

// DeleteActor mocks base method.
func (m *MockActorRepository) DeleteActor(actorID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorRepositoryMockRecorder) DeleteActor(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorRepository)(nil).DeleteActor), actorID)
}

// FindActorsByNameAndSurname mocks base method.
func (m *MockActorRepository) FindActorsByNameAndSurname(name, surname string) ([]*actor.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActorsByNameAndSurname", name, surname)
	ret0, _ := ret[0].([]*actor.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorsByNameAndSurname indicates an expected call of FindActorsByNameAndSurname.
func (mr *MockActorRepositoryMockRecorder) FindActorsByNameAndSurname(name, surname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorsByNameAndSurname", reflect.TypeOf((*MockActorRepository)(nil).FindActorsByNameAndSurname), name, surname)
}
