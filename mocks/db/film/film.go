// Code generated by MockGen. DO NOT EDIT.
// Source: db/film/film.go
//
// Generated by this command:
//
//	mockgen -source=db/film/film.go -destination=mocks/db/film/film.go
//

// Package mock_film is a generated GoMock package.
package mock_film

import (
	reflect "reflect"
	time "time"

	actor "github.com/lilpipidron/vk-godeveloper-task/api/types/actor"
	film "github.com/lilpipidron/vk-godeveloper-task/api/types/film"
	gomock "go.uber.org/mock/gomock"
)

// MockFilmRepository is a mock of FilmRepository interface.
type MockFilmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmRepositoryMockRecorder
}

// MockFilmRepositoryMockRecorder is the mock recorder for MockFilmRepository.
type MockFilmRepositoryMockRecorder struct {
	mock *MockFilmRepository
}

// NewMockFilmRepository creates a new mock instance.
func NewMockFilmRepository(ctrl *gomock.Controller) *MockFilmRepository {
	mock := &MockFilmRepository{ctrl: ctrl}
	mock.recorder = &MockFilmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmRepository) EXPECT() *MockFilmRepositoryMockRecorder {
	return m.recorder
}

// AddNewFilm mocks base method.
func (m *MockFilmRepository) AddNewFilm(title, description string, releaseDate time.Time, rating float32, actors []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewFilm", title, description, releaseDate, rating, actors)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewFilm indicates an expected call of AddNewFilm.
func (mr *MockFilmRepositoryMockRecorder) AddNewFilm(title, description, releaseDate, rating, actors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewFilm", reflect.TypeOf((*MockFilmRepository)(nil).AddNewFilm), title, description, releaseDate, rating, actors)
}

// ChangeFilmDescription mocks base method.
func (m *MockFilmRepository) ChangeFilmDescription(filmID int64, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilmDescription", filmID, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilmDescription indicates an expected call of ChangeFilmDescription.
func (mr *MockFilmRepositoryMockRecorder) ChangeFilmDescription(filmID, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilmDescription", reflect.TypeOf((*MockFilmRepository)(nil).ChangeFilmDescription), filmID, description)
}

// ChangeFilmRating mocks base method.
func (m *MockFilmRepository) ChangeFilmRating(filmID int64, rating float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilmRating", filmID, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilmRating indicates an expected call of ChangeFilmRating.
func (mr *MockFilmRepositoryMockRecorder) ChangeFilmRating(filmID, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilmRating", reflect.TypeOf((*MockFilmRepository)(nil).ChangeFilmRating), filmID, rating)
}

// ChangeFilmReleaseDate mocks base method.
func (m *MockFilmRepository) ChangeFilmReleaseDate(filmID int64, releaseDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilmReleaseDate", filmID, releaseDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilmReleaseDate indicates an expected call of ChangeFilmReleaseDate.
func (mr *MockFilmRepositoryMockRecorder) ChangeFilmReleaseDate(filmID, releaseDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilmReleaseDate", reflect.TypeOf((*MockFilmRepository)(nil).ChangeFilmReleaseDate), filmID, releaseDate)
}

// ChangeFilmTitle mocks base method.
func (m *MockFilmRepository) ChangeFilmTitle(filmID int64, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilmTitle", filmID, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilmTitle indicates an expected call of ChangeFilmTitle.
func (mr *MockFilmRepositoryMockRecorder) ChangeFilmTitle(filmID, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilmTitle", reflect.TypeOf((*MockFilmRepository)(nil).ChangeFilmTitle), filmID, title)
}

// DeleteFilm mocks base method.
func (m *MockFilmRepository) DeleteFilm(filmID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", filmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmRepositoryMockRecorder) DeleteFilm(filmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmRepository)(nil).DeleteFilm), filmID)
}

// FindAllActors mocks base method.
func (m *MockFilmRepository) FindAllActors(title string) ([]*actor.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllActors", title)
	ret0, _ := ret[0].([]*actor.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllActors indicates an expected call of FindAllActors.
func (mr *MockFilmRepositoryMockRecorder) FindAllActors(title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllActors", reflect.TypeOf((*MockFilmRepository)(nil).FindAllActors), title)
}

// FindFilmByTitleOrActorName mocks base method.
func (m *MockFilmRepository) FindFilmByTitleOrActorName(title, actor string) ([]*film.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmByTitleOrActorName", title, actor)
	ret0, _ := ret[0].([]*film.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmByTitleOrActorName indicates an expected call of FindFilmByTitleOrActorName.
func (mr *MockFilmRepositoryMockRecorder) FindFilmByTitleOrActorName(title, actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmByTitleOrActorName", reflect.TypeOf((*MockFilmRepository)(nil).FindFilmByTitleOrActorName), title, actor)
}

// GetAllFilms mocks base method.
func (m *MockFilmRepository) GetAllFilms() ([]*film.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms")
	ret0, _ := ret[0].([]*film.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockFilmRepositoryMockRecorder) GetAllFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockFilmRepository)(nil).GetAllFilms))
}
